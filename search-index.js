var searchIndex = {};
searchIndex["tokio"] = {"doc":"A runtime for writing reliable, asynchronous, and slim applications.","items":[[0,"executor","tokio","Task execution utilities.",null,null],[8,"Executor","tokio::executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",0,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",0,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[3,"Spawn","","Return value from the `spawn` function.",null,null],[5,"spawn","","Spawns a future on the default executor.",null,{"inputs":[{"name":"f"}],"output":{"name":"spawn"}}],[0,"current_thread","","Execute many tasks concurrently on the current thread.",null,null],[3,"CurrentThread","tokio::executor::current_thread","Executes tasks on the current thread",null,null],[3,"TaskExecutor","","Executes futures on the current thread.",null,null],[3,"Turn","","Returned by the `turn` function",null,null],[3,"Entered","","A `CurrentThread` instance bound to a supplied execution conext.",null,null],[3,"RunError","","Error returned by the `run` function.",null,null],[3,"RunTimeoutError","","Error returned by the `run_timeout` function.",null,null],[3,"TurnError","","Error returned by the `turn` function.",null,null],[3,"BlockError","","Error returned by the `block_on` function.",null,null],[5,"block_on_all","","Run the executor bootstrapping the execution with the provided future.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"spawn","","Executes a future on the current thread.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of `CurrentThread`.",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_park","","Create a new instance of `CurrentThread` backed by the given park handle.",7,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"is_idle","","Returns `true` if the executor is currently idle.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spawn","","Spawn the future on the executor.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",7,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"enter","","Bind `CurrentThread` instance with an execution context.",7,{"inputs":[{"name":"self"},{"name":"enter"}],"output":{"name":"entered"}}],[11,"spawn","","",7,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn the future on the executor.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",8,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop",8,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","Returns an executor that executes futures on the current thread.",1,{"inputs":[],"output":{"name":"taskexecutor"}}],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",1,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",1,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"is_timeout","","Returns `true` if the error was caused by the operation timeing out.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}],[11,"into_inner","","Returns the error yielded by the future being blocked on",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}],[0,"thread_pool","tokio::executor","Maintains a pool of threads across which the set of spawned tasks are executed.",null,null],[3,"Builder","tokio::executor::thread_pool","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[11,"fmt","tokio::executor","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_future","","",9,null],[0,"net","tokio","TCP/UDP bindings for `tokio`.",null,null],[3,"TcpStream","tokio::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"as_raw_fd","","",10,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",11,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",11,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",11,{"inputs":[{"name":"tcplistener"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",11,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",11,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",11,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",10,{"inputs":[{"name":"socketaddr"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",10,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",10,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connectfuture"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",10,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",10,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",10,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",10,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",10,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",10,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",10,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",10,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",10,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",10,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",10,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",10,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read","","",10,null],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",10,null],[11,"read_buf","","",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"shutdown","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",14,null],[11,"poll_complete","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",14,{"inputs":[{"name":"udpsocket"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",14,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",14,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",15,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",15,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",15,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",15,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",15,null],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read.",15,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",15,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",15,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",15,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",15,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",15,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",15,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",15,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",15,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",15,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",15,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",15,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",15,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[0,"reactor","tokio","Event loop that drives Tokio I/O resources.",null,null],[3,"Reactor","tokio::reactor","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Background","","Handle to the reactor running on a background thread.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[0,"runtime","tokio","A batteries included runtime for applications using Tokio.",null,null],[3,"Runtime","tokio::runtime","Handle to the Tokio runtime.",null,null],[3,"TaskExecutor","","Executes futures on the runtime",null,null],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",null,null],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"new","","Create a new runtime instance with default configuration values.",18,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Return a reference to the reactor handle for this runtime instance.",18,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"executor","","Return a handle to the runtime's executor.",18,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",18,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",18,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"execute","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"spawn","","",19,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"io","tokio","Asynchronous I/O.",null,null],[8,"AsyncRead","tokio::io","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",21,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",21,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",21,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",22,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",22,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",22,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",22,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",23,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",23,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",23,null],[13,"ConnectionReset","","The connection was reset by the remote server.",23,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",23,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",23,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",23,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",23,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",23,null],[13,"AlreadyExists","","An entity already exists, often a file.",23,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",23,null],[13,"InvalidInput","","A parameter was incorrect.",23,null],[13,"InvalidData","","Data not valid for the operation were encountered.",23,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",23,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",23,null],[13,"Interrupted","","This operation was interrupted.",23,null],[13,"Other","","Any I/O error not part of this list.",23,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",23,null],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",24,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",24,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",24,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",24,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",24,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",24,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",24,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",25,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",25,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",25,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",25,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"prelude","tokio","A \"prelude\" for users of the `tokio` crate.",null,null],[8,"AsyncRead","tokio::prelude","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",21,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",21,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",21,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",21,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",22,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",22,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",22,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",22,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",24,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",24,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",24,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",24,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",24,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",24,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",24,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",25,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",25,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",25,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",25,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",26,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",26,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",26,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",26,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",26,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",26,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",26,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",26,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",26,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",26,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",26,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",26,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",26,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[0,"future","","Futures",null,null],[8,"Future","tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",26,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",26,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",26,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",26,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",26,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",26,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",26,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",26,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",26,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",26,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",26,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",26,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",26,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",27,null],[16,"Item","","The item that the future may resolve with.",27,null],[16,"Error","","The error that the future may resolve with.",27,null],[10,"into_future","","Consumes this object and produces a future.",27,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",28,null],[16,"Error","","Possible errors during conversion.",28,null],[10,"future_from","","Consume the given value, beginning the conversion.",28,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",30,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",30,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Finished","","A future representing a value that is immediately ready.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",31,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",31,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",32,null],[13,"B","","Second branch of the type",32,null],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"finished","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[8,"Stream","tokio::prelude","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",33,null],[16,"Error","","The type of error this stream may generate.",33,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",33,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",33,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",33,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",33,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",33,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",33,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",33,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",33,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",33,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",33,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",33,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",33,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[0,"stream","","Asynchronous streams",null,null],[0,"futures_unordered","tokio::prelude::stream","An unbounded set of futures.",null,null],[3,"FuturesUnordered","tokio::prelude::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[8,"Stream","tokio::prelude::stream","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",33,null],[16,"Error","","The type of error this stream may generate.",33,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",33,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",33,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",33,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",33,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",33,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",33,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",33,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",33,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",33,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",33,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",33,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",33,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",33,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",34,null],[13,"Second","","An item from the second stream",34,null],[13,"Both","","Items from both streams",34,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"Sender","","The transmission end of a channel which is used to send values.",null,null],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"FutureSender","","Future returned by `Sender::send`.",null,null],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[3,"FuturesUnordered","","An unbounded set of futures.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[8,"Sink","tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",35,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",35,null],[10,"start_send","","Begin the process of sending a value to the sink.",35,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",35,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",35,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",35,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",35,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",35,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",35,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",35,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",35,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",35,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",27,null],[16,"Item","","The item that the future may resolve with.",27,null],[16,"Error","","The error that the future may resolve with.",27,null],[10,"into_future","","Consumes this object and produces a future.",27,null],[4,"Async","","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",36,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",36,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",37,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",37,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[0,"task","","Tasks used to drive a future computation",null,null],[3,"Task","tokio::prelude::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",38,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[5,"init","","Initialize the `futures` task system.",null,null],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",null,null],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",null,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",39,null],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",40,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[11,"fmt","tokio::executor","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"spawn","","",42,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"from","tokio::io","",43,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",43,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"from","","",43,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"description","","",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"unpark","tokio::reactor","",44,null],[11,"default","","",44,{"inputs":[],"output":{"name":"handle"}}],[11,"unpark","","",45,null],[11,"park","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"park_timeout","","",45,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",49,null],[11,"write","","",46,null],[11,"flush","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",46,null],[11,"shutdown","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","tokio::executor::thread_pool","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"status","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",53,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","tokio::io","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"from","tokio::prelude","",36,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"from","tokio::prelude::future","",62,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[11,"from_iter","tokio::prelude::stream","",63,{"inputs":[{"name":"t"}],"output":{"name":"futuresordered"}}],[11,"from_iter","","",64,{"inputs":[{"name":"t"}],"output":{"name":"futuresunordered"}}],[11,"next","tokio::prelude::stream::futures_unordered","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next","tokio::prelude::stream","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","tokio::prelude::future","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream::futures_unordered","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",149,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",134,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",126,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",125,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",143,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",82,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",121,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",102,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",141,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",133,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",145,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",129,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",90,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",135,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",67,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",95,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"eq","tokio::prelude","",37,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"eq","tokio::prelude::future","",30,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"drop","tokio::prelude::stream","",64,null],[11,"drop","tokio::prelude::future","",85,null],[11,"default","tokio::prelude::task","",148,{"inputs":[],"output":{"name":"atomictask"}}],[11,"description","tokio::prelude::stream","",142,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","tokio::prelude::future","",124,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"deref","","",123,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",124,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","tokio::prelude::task","",106,{"inputs":[{"name":"self"}],"output":{"name":"taskrc"}}],[11,"clone","tokio::prelude::future","",124,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"clone","tokio::prelude","",36,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"clone","tokio::prelude::future","",62,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"clone","tokio::prelude::task","",97,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"clone","tokio::prelude","",37,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"clone","tokio::prelude::future","",123,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"clone","tokio::prelude::task","",127,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"clone","tokio::prelude::future","",85,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"poll","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",137,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",146,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",118,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",105,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",139,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",85,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",103,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",131,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",87,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",68,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",110,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",89,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",147,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",101,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",144,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",140,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",74,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"start_send","tokio::prelude::stream","",88,null],[11,"poll_complete","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",114,null],[11,"poll_complete","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",107,null],[11,"poll_complete","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",113,null],[11,"poll_complete","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",112,null],[11,"poll_complete","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",149,null],[11,"poll_complete","","",149,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",149,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",115,null],[11,"poll_complete","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",69,null],[11,"poll_complete","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",141,null],[11,"poll_complete","","",141,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",141,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",121,null],[11,"poll_complete","","",121,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",121,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",117,null],[11,"poll_complete","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",77,null],[11,"poll_complete","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",135,null],[11,"poll_complete","","",135,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",135,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",100,null],[11,"poll_complete","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",145,null],[11,"poll_complete","","",145,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",145,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",82,null],[11,"poll_complete","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",98,null],[11,"poll_complete","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",130,null],[11,"poll_complete","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",71,null],[11,"poll_complete","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",80,null],[11,"poll_complete","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",75,null],[11,"poll_complete","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"current","tokio::executor","Returns a handle to the default executor for the current context.",42,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",41,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",41,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","tokio::executor::thread_pool","Returns a new thread pool builder initialized with default configuration values.",50,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"keep_alive","","Set the worker thread keep alive duration",50,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"builder"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",50,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"builder"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"around_worker","","Execute function `f` on each worker thread.",50,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"build","","Create the configured `ThreadPool`.",50,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",52,{"inputs":[],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",52,null],[11,"sender","","Return a reference to the sender handle",52,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",52,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",52,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown","","Shutdown the pool",52,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",52,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"new","tokio::reactor","Creates a new event loop, returning any error that happened during the creation.",45,{"inputs":[],"output":{"generics":["reactor","error"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",45,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",45,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",45,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","error"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",45,{"inputs":[{"name":"self"}],"output":{"generics":["background","error"],"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",44,{"inputs":[],"output":{"name":"handle"}}],[11,"handle","","Returns a reference to the reactor handle.",49,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",49,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",49,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",49,null],[11,"new","","Create a new `Registration`.",48,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",48,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_read_ready","","Consume any pending read readiness event.",48,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",48,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_write_ready","","Consume any pending write readiness event.",48,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",46,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",46,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"generics":["pollevented","error"],"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",46,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"need_read","","Resets the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",46,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",46,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"need_write","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",46,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",46,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",46,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",46,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","tokio::io","Returns the underlying I/O object.",61,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",43,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",43,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",43,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",43,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",43,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",43,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",43,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",43,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"new","tokio::prelude::future","Create a new `ExecuteError`",138,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",138,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",138,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",85,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",32,null],[11,"new","tokio::prelude::stream","Constructs a new, empty `FuturesUnordered`",64,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",64,null],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",64,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",130,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",145,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",145,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",145,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",135,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",135,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",135,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",112,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",112,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",112,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",149,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",149,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",149,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",102,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"send","","Sends a new value along this channel to the receiver.",120,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"futuresender"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",98,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",121,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",121,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",121,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",113,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",113,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",113,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",117,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",117,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",117,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",63,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",63,null],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",107,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",107,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",107,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",114,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",141,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",141,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",141,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",115,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",115,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",115,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"map","tokio::prelude","Change the success value of this `Async` with the closure provided",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"notify","tokio::prelude::task","Indicate that the task should attempt to poll its future in a timely fashion.",97,null],[11,"is_current","","Returns `true` when called from within the context of the task.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",132,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",106,{"inputs":[{"name":"a"}],"output":{"name":"taskrc"}}],[11,"with","","Operate with a reference to the underlying data.",106,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",94,null],[11,"poll_future","","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",119,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",119,null],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",119,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",119,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",119,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",119,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",119,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",119,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",119,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",119,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",119,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",119,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"new","","Create an `AtomicTask` initialized with the given `Task`",148,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",148,null],[11,"notify","","Notifies the task that last called `register`.",148,null],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",127,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}]],"paths":[[8,"Executor"],[3,"TaskExecutor"],[3,"Turn"],[3,"RunError"],[3,"RunTimeoutError"],[3,"TurnError"],[3,"BlockError"],[3,"CurrentThread"],[3,"Entered"],[3,"Spawn"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"ConnectFuture"],[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"],[3,"Runtime"],[3,"TaskExecutor"],[3,"Shutdown"],[8,"AsyncRead"],[8,"AsyncWrite"],[4,"ErrorKind"],[8,"Read"],[8,"Write"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Stream"],[4,"MergedItem"],[8,"Sink"],[4,"Async"],[4,"AsyncSink"],[8,"Unpark"],[8,"EventSet"],[8,"Executor"],[3,"SpawnError"],[3,"DefaultExecutor"],[3,"Error"],[3,"Handle"],[3,"Reactor"],[3,"PollEvented2"],[3,"Turn"],[3,"Registration"],[3,"Background"],[3,"Builder"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Sender"],[3,"ReadExact"],[3,"ReadUntil"],[3,"WriteAll"],[3,"Copy"],[3,"Shutdown"],[3,"Flush"],[3,"ReadToEnd"],[3,"Lines"],[3,"Finished"],[3,"FuturesOrdered"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"Wait"],[3,"IntoStream"],[3,"SelectNext"],[3,"Then"],[3,"Flatten"],[3,"MapErr"],[3,"OrElse"],[3,"Lazy"],[3,"CatchUnwind"],[3,"FilterMap"],[3,"Join4"],[3,"Fuse"],[3,"Chain"],[3,"Join3"],[3,"Filter"],[3,"IterStream"],[3,"Map"],[3,"Select2"],[3,"Empty"],[3,"Shared"],[3,"Fuse"],[3,"FutureSender"],[3,"Flatten"],[3,"Select"],[3,"Zip"],[3,"SelectAll"],[3,"Unfold"],[3,"Collect"],[3,"Run"],[3,"Select"],[3,"CatchUnwind"],[3,"Task"],[3,"TakeWhile"],[3,"AndThen"],[3,"OrElse"],[3,"SelectOk"],[3,"SplitStream"],[3,"MapErr"],[3,"Merge"],[3,"FromErr"],[3,"TaskRc"],[3,"AndThen"],[3,"PollFn"],[3,"Inspect"],[3,"Concat"],[3,"LoopFn"],[3,"Buffered"],[3,"Inspect"],[3,"Peekable"],[3,"SkipWhile"],[3,"Repeat"],[3,"Take"],[3,"Fold"],[3,"Spawn"],[3,"Sender"],[3,"InspectErr"],[3,"Join5"],[3,"SharedItem"],[3,"SharedError"],[3,"IterOk"],[3,"Empty"],[3,"UnparkEvent"],[3,"PollFn"],[3,"Once"],[3,"SplitSink"],[3,"JoinAll"],[3,"LocalKey"],[3,"IterResult"],[3,"Receiver"],[3,"Skip"],[3,"Then"],[3,"Concat2"],[3,"ExecuteError"],[3,"StreamFuture"],[3,"ForEach"],[3,"Chunks"],[3,"SendError"],[3,"FlattenStream"],[3,"Map"],[3,"BufferUnordered"],[3,"Join"],[3,"Forward"],[3,"AtomicTask"],[3,"FromErr"]]};
searchIndex["tokio_executor"] = {"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"inputs":[],"output":{"generics":["enter","entererror"],"name":"result"}}],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"with_default","","Set the default executor for the duration of the closure",null,{"inputs":[{"name":"t"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"current","","Returns a handle to the default executor for the current context.",2,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"spawn","","",2,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[0,"park","","Abstraction over blocking and unblocking the current thread.",null,null],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",null,null],[8,"Park","","Block the current thread.",null,null],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,null],[16,"Error","","Error returned by `park`",3,null],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,null],[10,"park","","Block the current thread unless or until the token is available.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"park_timeout","","Park the current thread for at most `duration`.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",null,null],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unparkthread"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,{"inputs":[],"output":{"name":"parkthread"}}],[11,"unpark","","",5,null],[11,"park","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"unpark","","",7,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","tokio_executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",8,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_io"] = {"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[0,"codec","tokio_io","Utilities for encoding and decoding frames.",null,null],[3,"BytesCodec","tokio_io::codec","A simple `Codec` implementation that just ships bytes around.",null,null],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",null,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",null,null],[12,"inner","","The inner transport used to read bytes to and write bytes to",8,null],[12,"readbuf","","The buffer with read but unprocessed data.",8,null],[12,"writebuf","","A buffer with unprocessed data which are not written yet.",8,null],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",null,null],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bytescodec"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",9,{"inputs":[],"output":{"name":"bytescodec"}}],[11,"decode","","",9,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"linescodec"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",10,{"inputs":[],"output":{"name":"linescodec"}}],[11,"decode","","",10,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"decode_eof","","",10,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"string"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[0,"length_delimited","","Frame a stream of bytes based on a length prefix",null,null],[3,"Builder","tokio_io::codec::length_delimited","Configure length delimited `FramedRead`, `FramedWrite`, and `Framed` values.",null,null],[3,"Framed","","Adapts a byte stream into a unified `Stream` and `Sink` that works over entire frame values.",null,null],[3,"FramedRead","","Adapts a byte stream to a `Stream` yielding entire frame values.",null,null],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",null,null],[3,"FramedWrite","","Adapts a byte stream to a `Sink` accepting entire frame values.",null,null],[8,"Decoder","tokio_io::codec","Decoding of frames via buffers.",null,null],[16,"Item","","The type of decoded frames.",11,null],[16,"Error","","The type of unrecoverable frame decoding errors.",11,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",11,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",11,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",null,null],[16,"Item","","The type of items consumed by the `Encoder`",12,null],[16,"Error","","The type of encoding errors.",12,null],[10,"encode","","Encodes a frame into the buffer provided.",12,null],[11,"fmt","tokio_io::io","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"allowstdio"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",13,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_ref","","Returns a reference to the contained IO object.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",13,null],[11,"write_fmt","","",13,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"shutdown","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"read","","",13,null],[11,"read_to_end","","",13,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",13,null],[11,"from_parts","tokio_io::codec","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",14,{"inputs":[{"name":"framedparts"},{"name":"u"}],"output":{"name":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream and the buffer with unprocessed data.",14,{"inputs":[{"name":"self"}],"output":{"name":"framedparts"}}],[11,"into_parts_and_codec","","Consumes the `Frame`, returning its underlying I/O stream and the buffer with unprocessed data, and also the current codec state.",14,null],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",14,null],[11,"poll_complete","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",15,{"inputs":[{"name":"t"},{"name":"d"}],"output":{"name":"framedread"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"decoder","","Returns a reference to the underlying decoder.",15,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",15,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",15,null],[11,"poll_complete","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",16,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"framedwrite"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"encoder","","Returns a reference to the underlying decoder.",16,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",16,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"start_send","","",16,null],[11,"poll_complete","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","tokio_io::codec::length_delimited","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Framed` with default configuration values.",19,{"inputs":[{"name":"t"}],"output":{"name":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"start_send","","",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["error"],"name":"startsend"}}],[11,"poll_complete","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"close","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `FramedRead` with default configuration values.",18,{"inputs":[{"name":"t"}],"output":{"name":"framedread"}}],[11,"max_frame_length","","Returns the current max frame setting",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_max_frame_length","","Updates the max frame setting.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"start_send","","",18,null],[11,"poll_complete","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",18,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"new","","Creates a new `FramedWrite` with default configuration values.",20,{"inputs":[{"name":"t"}],"output":{"name":"framedwrite"}}],[11,"max_frame_length","","Returns the current max frame setting",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_max_frame_length","","Updates the max frame setting.",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start_send","","",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["error"],"name":"startsend"}}],[11,"poll_complete","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"close","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"read","","",20,null],[11,"read_buf","","",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"prepare_uninitialized_buffer","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new length delimited framer builder with default configuration values.",17,{"inputs":[],"output":{"name":"builder"}}],[11,"big_endian","","Read the length field as a big endian integer",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"little_endian","","Read the length field as a little endian integer",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"native_endian","","Read the length field as a native endian integer",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"max_frame_length","","Sets the max frame length",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_field_length","","Sets the number of bytes used to represent the length field",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"new_read","","Create a configured length delimited `FramedRead`",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framedread"}}],[11,"new_write","","Create a configured length delimited `FramedWrite`",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framedwrite"}}],[11,"new_framed","","Create a configured length delimited `Framed`",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","tokio_io::io","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Returns the underlying I/O object.",22,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",23,null],[11,"read_buf","","",23,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",25,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"as_ref","","",25,null],[11,"as_mut","","",25,null],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",26,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",26,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",26,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",27,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",27,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null],[11,"decode_eof","tokio_io::codec","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",11,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"prepare_uninitialized_buffer","tokio_io","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",26,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",26,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",26,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",26,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",27,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",27,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",27,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LinesCodec"],[8,"Decoder"],[8,"Encoder"],[3,"AllowStdIo"],[3,"Framed"],[3,"FramedRead"],[3,"FramedWrite"],[3,"Builder"],[3,"FramedRead"],[3,"Framed"],[3,"FramedWrite"],[3,"FrameTooBig"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_reactor"] = {"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[3,"Reactor","","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",null,null],[5,"with_default","","Set the default reactor for the duration of the closure",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle","","Returns a reference to the reactor handle.",0,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",1,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",1,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"need_read","","Resets the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"need_write","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Registration`.",2,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool"],"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_read_ready","","Consume any pending read readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_write_ready","","Consume any pending write readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"setfallbackerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",6,{"inputs":[],"output":{"generics":["reactor"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",6,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",6,{"inputs":[{"name":"self"}],"output":{"generics":["background"],"name":"result"}}],[11,"unpark","","",6,null],[11,"park","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",6,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",3,{"inputs":[],"output":{"name":"handle"}}],[11,"unpark","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",3,{"inputs":[],"output":{"name":"handle"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Background"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["tokio_threadpool"] = {"doc":"A work-stealing based thread pool for executing futures.","items":[[3,"ThreadPool","tokio_threadpool","Work-stealing based thread pool for executing futures.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"Builder","","Builds a thread pool with custom configuration values.",null,null],[3,"Worker","","Thread worker",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new thread pool builder initialized with default configuration values.",3,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"keep_alive","","Set the worker thread keep alive duration",3,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"self"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"around_worker","","Execute function `f` on each worker thread.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Create the configured `ThreadPool`.",3,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"new","","Create a new `ThreadPool` with default values.",0,{"inputs":[],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sender","","Return a reference to the sender handle",0,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",0,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown","","Shutdown the pool",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"spawn","","Spawn a future onto the thread pool",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",1,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"run","","Run the worker",4,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"ThreadPool"],[3,"Sender"],[3,"Shutdown"],[3,"Builder"],[3,"Worker"]]};
initSearch(searchIndex);
